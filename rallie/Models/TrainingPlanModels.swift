import Foundation

// MARK: - Training Plan Models

/// Represents a complete training plan generated by the AI
struct TrainingPlan: Codable, Identifiable {
    var id: String = UUID().uuidString
    var title: String
    var description: String
    var totalDuration: Int // in minutes
    var segments: [TrainingSegment]
    var createdAt: Date = Date()
    
    enum CodingKeys: String, CodingKey {
        case id, title, description, totalDuration, segments, createdAt
    }
}

/// Represents a single segment/drill within a training plan
struct TrainingSegment: Codable, Identifiable {
    var id: String = UUID().uuidString
    var name: String
    var duration: Int // in minutes
    var machineSettings: MachineSettings
    var focus: String
    
    enum CodingKeys: String, CodingKey {
        case id, name, duration, machineSettings, focus
    }
}

/// Machine settings for a specific training segment
struct MachineSettings: Codable {
    var speed: Int // mph
    var spin: Int // -2 to 2 where negative is backspin, positive is topspin
    var position: Position
    var quantity: Int // number of balls
    
    /// Convert the spin value to the app's SpinType enum
    var spinType: SpinType {
        switch spin {
        case -2:
            return .extremeBackspin
        case -1:
            return .backspin
        case 0:
            return .flat
        case 1:
            return .topspin
        case 2:
            return .extremeTopspin
        default:
            return .flat
        }
    }
}

/// Position on the court (x, y coordinates)
struct Position: Codable {
    var x: Double // court position X (0-1000)
    var y: Double // court position Y (0-1000)
}

// MARK: - Session Tracking

/// Status of a training session
enum TrainingSessionStatus: String, Codable {
    case planned = "planned"
    case inProgress = "in-progress"
    case completed = "completed"
    case paused = "paused"
}

/// Represents a training session (execution of a plan)
struct TrainingSession: Codable, Identifiable {
    var id: String = UUID().uuidString
    var planId: String
    var startTime: Date
    var endTime: Date?
    var status: TrainingSessionStatus
    var currentSegmentIndex: Int = 0
    
    /// Calculate the elapsed time of the session
    var elapsedTime: TimeInterval {
        if status == .completed, let endTime = endTime {
            return endTime.timeIntervalSince(startTime)
        } else {
            return Date().timeIntervalSince(startTime)
        }
    }
}

// MARK: - Extensions

extension Date {
    func formattedString() -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: self)
    }
}
